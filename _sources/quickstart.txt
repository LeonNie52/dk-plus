Setup
**********

In this chapter you will find any relevant information to get you started with this API. 

.. note::
	If you are not familliarized with Dronekit-Python already, it is advised that you read the official `Dronekit-Python Documentation <http://python.dronekit.io/>`_

Requirements
============

.. warning::
	This API was developed for :strong:`Dronekit-Python 2.x` so it is not guaranteed that future versions of Dronekit will be backwards compatible with :strong:`DK+`. The code has been tested in dronekit's software in the loop (dronekit-SITL), with the ArduCopter autopilot firmware version 3.3 :strong:`AC3.3`. 

Python 2.x
------------
DK+ uses the `Python 2.7 <https://docs.python.org/2/>`_ programming language. The API has been tested in :strong:`Linux` Operating System but it is not believed that there is going to be a problem with :strong:`Windows` because of the portability of Python.

Dronekit-Python
---------------
In order to get DK+ up and running you will need to `install dronekit-python <http://python.dronekit.io/guide/quick_start.html>`_ first. This is a necessary installation since DK+ is an API that :emphasis:`extends` Dronekit. If you want to simulate your vehicle on the console (and you probably want), you also need to download and install `Dronekit SITL <http://python.dronekit.io/develop/sitl_setup.html>`_ 

.. _wireless-interface:

Wireless Networking
-------------------
If you want to setup your system's network interfaces (join ad-hoc networks, AP, etc), there is extra useful documentation on `Linux-Wireless <https://wireless.wiki.kernel.org/en/users/documentation>`_ and `SlicePi <http://slicepi.com/creating-an-ad-hoc-network-for-your-raspberry-pi/>`_.

.. _firewall:

Firewall Rules
--------------
Since your computer will be communicating with other hardware, you have to make sure that your system accept incoming/outgoing messages of your protocol. 

.. tip::
	If you receive packets but the program is not receiving it without any raised exception, then check if the packets are blocked by your firewall.

.. note::
	Currently, the only communication protocol that is supported is UDP. Though :strong:`0MQ` has not been implemeted in this project, you can get more information about protocols and networking in this very handy `0MQ guide <http://zguide.zeromq.org>`_.

If you run a Linux distribution with the ufw firewall, you can add/remove rules through a graphical UI. For low-level rulesetting, you may have to change `iptables <https://help.ubuntu.com/community/IptablesHowTo>`_ to accept a selection/all incoming and outgoing UDP packets. 

.. warning::
	The following command adds two firewall exceptions, to accept ALL incoming and outgoing UDP packets. Be extra careful and proceed at your own risk.

Open the Linux Console and try::

	sudo iptables -I INPUT -p udp -j ACCEPT && sudo iptables -I OUTPUT -p udp -j ACCEPT 

.. _first-example:

First example
=============

This example demonstrates the integration between Dronekit and DK+. The code at first creates a `Vehicle <http://python.dronekit.io/automodule.html#dronekit.Vehicle>`_ object at the specified connection_string (e.g 'tcp:127.0.0.1:5760') and then this object is passed as a parameter to DKplus :ref:`Networking <networking>` class. With the `Vehicle <http://python.dronekit.io/automodule.html#dronekit.Vehicle>`_ object and an established network using the specified address, a :ref:`CollisionThread <collision-thread>` protocol, here the 'priorities' protocol, can be used.::

	from dronekit import connect
	from drone_network import Networking
	from collision_avoidance import CollisionThread

	# Connect to the Vehicle
	print 'Connecting to vehicle on: %s' % connection_string
	vehicle = connect(connection_string, wait_ready=True)

	#Create the interface with UDP broadcast sockets
	address = ("192.168.2.255", 54545)
	network = Networking(address, "UDP_BROADCAST", vehicle)

	#Add collision avoidance algorithm
	t_collision = CollisionThread(network, 'priorities')

	"""
		Add your own commands here!
	"""

.. note::
	Since Networking and CollisionAvoidance spawn `threads <https://docs.python.org/2/library/threading.html>`_, there is the need to explicitly run the threads. You can achieve this by adding the following lines of code before arming the vehicle.

::

	print "Initializing interface"
	network.run()

	print "Starting collision avoidance scheme"
	t_collision.start()

You can save the above lines of code to a python script 'first_example.py' and view the results at the console after navigating to your folder and typing::
	
	python first_example.py

If everything goes well, on your console you should see something like the following::

	Starting copter simulator (SITL)
	SITL already Downloaded.
	Connecting to vehicle on: tcp:127.0.0.1:5760
	>>> APM:Copter V3.3 (d6053245)
	>>> Frame: QUAD
	>>> Calibrating barometer
	>>> Initialising APM...
	>>> barometer calibration complete
	>>> GROUND START
	Initializing interface
	Network interface started succesfully
	Starting collision avoidance scheme


.. tip::

	After these lines of code you can add any code you like. It is advised to start with the `Examples <http://python.dronekit.io/examples/index.html>`_ of dronekit-python first. You can also check the file :obj:`mav_exchange.py` which is a variation of the Dronekit `Examples <http://python.dronekit.io/examples/index.html>`_ with the DK+ integrated. 





